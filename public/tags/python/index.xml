<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on thingsithinkithink</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on thingsithinkithink</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Aug 2025 08:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building Domain-Specific Annotation Tools with FastHTML: Lessons from Isaac Flath</title>
      <link>http://localhost:1313/posts/2025/08-16-isaac-flath-fasthtml-annotation-tools/</link>
      <pubDate>Sat, 16 Aug 2025 08:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2025/08-16-isaac-flath-fasthtml-annotation-tools/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m writing up my notes from &lt;a href=&#34;https://maven.com/parlance-labs/evals&#34;&gt;Hamel Husain and Shreya Shankar&amp;rsquo;s excellent AI Evals course&lt;/a&gt;. Today we have Isaac Flath&amp;rsquo;s (cohort 1) session on building custom annotation tools. Isaac showed how he built a real-world medical flashcard annotation system for AnkiHub using FastHTML.  I&amp;rsquo;ve written before about FastHTML (see &lt;a href=&#34;http://localhost:1313/posts/2025/07-18-chrome-devtools-fasthtml-development/&#34;&gt;FastHTML&amp;rsquo;s Chrome DevTools integration&lt;/a&gt;) and this builds on that with a bit of detil on FastLite db support and some htmx stuff.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;the-ankihub-challenge-inverted-retrieval-at-scale&#34;&gt;The AnkiHub Challenge: Inverted Retrieval at Scale&lt;/h2&gt;&#xA;&lt;p&gt;Isaac&amp;rsquo;s use case centers on &lt;a href=&#34;https://ankihab.net&#34;&gt;AnkiHub&lt;/a&gt;, a medical flashcard platform where students search for study materials.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Connecting Chrome DevTools to FastHTML Apps for Rapid Style Iteration</title>
      <link>http://localhost:1313/posts/2025/07-18-chrome-devtools-fasthtml-development/</link>
      <pubDate>Fri, 18 Jul 2025 09:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2025/07-18-chrome-devtools-fasthtml-development/</guid>
      <description>&lt;p&gt;I learned a cool trick that I think will speed up the web development process for me.&lt;/p&gt;&#xA;&lt;p&gt;The process of editing CSS, saving it, refreshing the web browser page is quite annoying. And although you can edit the CSS inside the Chrome DevTools, having to then go back into your main IDE to make the changes is something that&amp;rsquo;s a bit of a pain.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been experimenting with FastHTML, which is a Python library for building HTML apps. And Jeremy from Answer.ai &lt;a href=&#34;https://www.youtube.com/watch?v=576ouCQ6mlk&#34;&gt;shared a nice wee trick&lt;/a&gt; that will speed up the iteration process. And I haven&amp;rsquo;t actually seen this before, so I thought I&amp;rsquo;d write about it here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Improving Python Function Usability with wrapping</title>
      <link>http://localhost:1313/posts/2024/12-28-improving-function-usability-a-practical-tip/</link>
      <pubDate>Fri, 27 Dec 2024 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/12-28-improving-function-usability-a-practical-tip/</guid>
      <description>&lt;h3 id=&#34;improving-function-usability-a-practical-tip&#34;&gt;&lt;strong&gt;Improving Function Usability: A Practical Tip&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Today I was doing a Solveit tutorial and it touched on a simple way to improve the usability of functions without altering their core behaviour.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;wrapping-functions-for-easier-use&#34;&gt;Wrapping Functions for Easier Use&lt;/h3&gt;&#xA;&lt;p&gt;Take Pythonâ€™s &lt;code&gt;re.finditer&lt;/code&gt;, for example. It returns an iterator, which you might often need to convert into a list for processing. Instead of repeating &lt;code&gt;list(re.finditer(...))&lt;/code&gt; all over your code, you can wrap it in a helper function:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
