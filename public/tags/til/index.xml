<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Til on thingsithinkithink</title>
    <link>http://localhost:1313/tags/til/</link>
    <description>Recent content in Til on thingsithinkithink</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Dec 2024 20:16:05 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Two AI things from Kent Hendricks&#39; annual &#39;Things I learned&#39; blog</title>
      <link>http://localhost:1313/posts/2024/12-30-two-ai-things-from-kent-hendrick-s-annual-things-i-learned-blog/</link>
      <pubDate>Mon, 30 Dec 2024 20:16:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/12-30-two-ai-things-from-kent-hendrick-s-annual-things-i-learned-blog/</guid>
      <description>&lt;p&gt;Two AI things I learned reading Kent Hendricks&amp;rsquo; annual &lt;a href=&#34;https://kenthendricks.com/52-things-i-learned-in-2024/&#34;&gt;&amp;ldquo;Things I learned&amp;rdquo;&lt;/a&gt; blog post:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The introduction of ChatGPT led to a 2% decrease in freelance job postings on Upwork.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;While humans emit 27g of CO₂ when writing 300 words, ChatGPT accomplishes this in 4.4 seconds, producing only 2.2g of CO₂.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I’m relieved that using an LLM for grunt work doesn’t automatically force us to sacrifice caring about the climate. However, the notion of valuing people based on their carbon output feels dystopian ( like something out of Black Mirror).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Regular Expression Basics</title>
      <link>http://localhost:1313/posts/2024/12-28-regular-expressions/</link>
      <pubDate>Sat, 28 Dec 2024 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/12-28-regular-expressions/</guid>
      <description>&lt;h3 id=&#34;regular-expressions&#34;&gt;&lt;strong&gt;Regular Expressions&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Regular expressions have always been a pain in the arse for me. I usually use online generators, or more recently AI to create them.  On a recent Solveit tutorial, I finally got my head around some basics.&lt;/p&gt;&#xA;&lt;p&gt;A thing to note: I’m using the &lt;a href=&#34;http://localhost:1313/posts/2024/12-28-improving-function-usability-a-practical-tip/&#34;&gt;wrapped version of &lt;code&gt;finditer&lt;/code&gt;&lt;/a&gt; here, so it always returns a list.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;finding-a-simple-char-using-regex&#34;&gt;Finding a Simple Char Using Regex&lt;/h3&gt;&#xA;&lt;p&gt;If I have a string like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;467...114...35...633...#...617...+...58...592...755...$...664...598.&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then this regex finds &lt;code&gt;7&lt;/code&gt;s in the string.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Improving Python Function Usability with wrapping</title>
      <link>http://localhost:1313/posts/2024/12-28-improving-function-usability-a-practical-tip/</link>
      <pubDate>Fri, 27 Dec 2024 12:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/12-28-improving-function-usability-a-practical-tip/</guid>
      <description>&lt;h3 id=&#34;improving-function-usability-a-practical-tip&#34;&gt;&lt;strong&gt;Improving Function Usability: A Practical Tip&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Today I was doing a Solveit tutorial and it touched on a simple way to improve the usability of functions without altering their core behaviour.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;wrapping-functions-for-easier-use&#34;&gt;Wrapping Functions for Easier Use&lt;/h3&gt;&#xA;&lt;p&gt;Take Python’s &lt;code&gt;re.finditer&lt;/code&gt;, for example. It returns an iterator, which you might often need to convert into a list for processing. Instead of repeating &lt;code&gt;list(re.finditer(...))&lt;/code&gt; all over your code, you can wrap it in a helper function:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
